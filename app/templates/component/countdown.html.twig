<!-- Countdown -->
    <div class="mx-auto mt-10">
        <div class="flex items-center justify-center space-x-4 mt-4" x-data="timer(new Date('2023-12-01 00:00:00'))" x-init="init();">
            <div class="flex flex-col items-center px-4">
                <span x-text="time().days" class="text-9xl lg:text-7xl">00</span>
                <span class="text-gray-400 mt-2 text-4xl lg:text-2xl">Days</span>
            </div>
            <span class="w-[1px] sm:w-[2px] h-24 bg-gray-400"></span>
            <div class="flex flex-col items-center px-4">
                <span x-text="time().hours" class="text-9xl lg:text-7xl">00</span>
                <span class="text-gray-400 mt-2 text-4xl lg:text-2xl">Hours</span>
            </div>
            <span class="w-[1px] sm:w-[2px] h-24 bg-gray-400"></span>
            <div class="flex flex-col items-center px-4">
                <span x-text="time().minutes" class="text-9xl lg:text-7xl">00</span>
                <span class="text-gray-400 mt-2 text-4xl lg:text-2xl">Minutes</span>
            </div>
            <span class="w-[1px] sm:w-[2px] h-24 bg-gray-400"></span>
            <div class="flex flex-col items-center px-4">
                <span x-text="time().seconds" class="text-9xl lg:text-7xl">00</span>
                <span class="text-gray-400 mt-2 text-4xl lg:text-2xl">Seconds</span>
            </div>
        </div>                      
    </div>
    <script>
        function timer(expiry) {
            return {
                expiry: expiry,
                remaining:null,
                init() {
                this.setRemaining()
                setInterval(() => {
                    this.setRemaining();
                }, 1000);
                },
                setRemaining() {
                const diff = this.expiry - new Date().getTime();
                this.remaining =  parseInt(diff / 1000);
                },
                days() {
                return {
                    value:this.remaining / 86400,
                    remaining:this.remaining % 86400
                };
                },
                hours() {
                return {
                    value:this.days().remaining / 3600,
                    remaining:this.days().remaining % 3600
                };
                },
                minutes() {
                    return {
                    value:this.hours().remaining / 60,
                    remaining:this.hours().remaining % 60
                };
                },
                seconds() {
                    return {
                    value:this.minutes().remaining,
                };
                },
                format(value) {
                return ("0" + parseInt(value)).slice(-2)
                },
                time(){
                    return {
                    days:this.format(this.days().value),
                    hours:this.format(this.hours().value),
                    minutes:this.format(this.minutes().value),
                    seconds:this.format(this.seconds().value),
                }
                },
            }
        }
    </script>
